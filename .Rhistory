MatchCodes = plyr::ldply(result, rbind)
names(MatchCodes) <- c("Tournament","part1")
####### everything aboves here makes the 580/MS
Codes <- NULL
list <- NULL
list <- c(1:127)
list <- stringr::str_pad(list, 3, side = "left", pad = 0)
Result <- c()
Retrieve <- function(x){
for(y in list){
Result <- c(Result, paste(x,y,sep = ""))
}
return(Result)
}
list2 <- MatchCodes$part1
Codes <- Retrieve(list2)
#Get Match Data and stats of players on a match basis
getmatchdata <- function(x) {
year <- 2017
matchpage <- paste0("http://www.atpworldtour.com/en/scores/",year,"/",x,"/match-stats")
s <- html_session(matchpage)
match_webpage <- read_html(matchpage)
TournamentCode <- paste(substring(x,1,nchar(x)-6))
MatchCode <- x
P1FirstName_HTML <- html_nodes(match_webpage,".player-left-name .first-name")
P1FirstName_text <- html_text(P1FirstName_HTML)
P1LastName_HTML <- html_nodes(match_webpage,".player-left-name .last-name")
P1LastName_text <- html_text(P1LastName_HTML)
P1Name <- paste(P1FirstName_text,P1LastName_text)
#Follow individual player links to get more player info.
P1URL_HTML <- html_nodes(match_webpage, ".player-left-name a")
P1URL_HTML= sub('<a href=\"', '\"\r\n', P1URL_HTML)
print(P1URL_HTML)
P1Page <- s %>% follow_link(P1URL_HTML) %>% read_html()
P1 <- html_nodes(P1Page,  "#mainLayoutWrapper .table-big-value")
P1age <- P1[1]
P1weight <- P1[3]
P1secondRow <- html_nodes(P1Page, "#mainLayoutWrapper .table-label")
P1stance <- P1secondRow[3]
P2URL_HTML <- html_nodes(match_webpage, ".player-right-name a")
P2URL_text <- html_text(P2URL_HTML)
P2Page <- s %>% follow_link(P2URL_text) %>% read_html()
P2 <- html_nodes(P1Page,  "#mainLayoutWrapper .table-big-value")
P2age <- P2[1]
P2weight <- P2[3]
P2secondRow <- html_nodes(P2Page, "#mainLayoutWrapper .table-label")
P2stance <- P2secondRow[3]
P2FirstName_HTML <- html_nodes(match_webpage,".player-right-name .first-name")
P2FirstName_text <- html_text(P2FirstName_HTML)
#we need to bring this in later so we can deal with score
P2LastName_HTML <- html_nodes(match_webpage,".player-right-name .last-name")
P2LastName_text <- html_text(P2LastName_HTML)
P2Name <- paste(P2FirstName_text,P2LastName_text)
#Data not in the match page, must be retrieves from PlayerData
#Birthday_HTML <- html_nodes(player_webpage,".table-birthday-wrapper")
#Birthday_text <- html_text(Birthday_HTML)
#Weight_HTML <- html_nodes(player_webpage,".table-weight-kg")
#Weight_text <- html_text(Weight_HTML)
#Height_HTML <- html_nodes(player_webpage,".table-height-cm-wrapper")
#Height_text <- html_text(Height_HTML)
#Stance_HTML <- html_nodes(player_webpage,"td:nth-child(3) .table-value")
#Stance_text <- html_text(Stance_HTML)
#Service Stats Below
#Serve Rating
P1ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-left a")
P1ServeRating_text <- html_text(P1ServeRating_HTML)
P2ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-right a")
P2ServeRating_text <- html_text(P2ServeRating_HTML)
#Aces
P1Aces_HTML <- html_nodes(match_webpage,".percent-on:nth-child(3) .match-stats-number-left span")
P1Aces_text <- html_text(P1Aces_HTML)
P2Aces_HTML <- html_nodes(match_webpage,".percent-on:nth-child(3) .match-stats-number-right span")
P2Aces_text <- html_text(P2Aces_HTML)
#DeltaAces <- P1Aces_text - P2Aces_text
#Double Faults
P1DoubeFaults_HTML <- html_nodes(match_webpage,".percent-on:nth-child(4) .match-stats-number-left span")
P1DoubeFaults_text <- html_text(P1DoubeFaults_HTML)
P2DoubeFaults_HTML <- html_nodes(match_webpage,".percent-on:nth-child(4) .match-stats-number-right span")
P2DoubeFaults_text <- html_text(P2DoubeFaults_HTML)
#1st Serve
P1FirstServe_HTML <- html_nodes(match_webpage,".percent-on:nth-child(5) .match-stats-number-left span:nth-child(1)")
P1FirstServe_text <- html_text(P1FirstServe_HTML)
P2FirstServe_HTML <- html_nodes(match_webpage,".percent-on:nth-child(5) .match-stats-number-right span:nth-child(1)")
P2FirstServe_text <- html_text(P2FirstServe_HTML)
#1st Serve Points Won
P1FirstServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(6) .match-stats-number-left span:nth-child(1)")
P1FirstServePtsWon_text <- html_text(P1FirstServePtsWon_HTML)
P2FirstServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(6) .match-stats-number-right span:nth-child(1)")
P2FirstServePtsWon_text <- html_text(P2FirstServePtsWon_HTML)
#2nd Serve Points Won
P1SecServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(7) .match-stats-number-left span:nth-child(1)")
P1SecServePtsWon_text <- html_text(P1SecServePtsWon_HTML)
P2SecServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(7) .match-stats-number-right span:nth-child(1)")
P2SecServePtsWon_text <- html_text(P2SecServePtsWon_HTML)
#Break Points Saved
P1ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-left a")
P1ServeRating_text <- html_text(P1ServeRating_HTML)
P2ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-right a")
P2ServeRating_text <- html_text(P2ServeRating_HTML)
#Service Games Played
P1ServiceGamessPlayed_HTML <- html_nodes(match_webpage,".percent-on:nth-child(8) .match-stats-number-left span:nth-child(1)")
P1ServiceGamessPlayed_text <- html_text(P1ServiceGamessPlayed_HTML)
P2ServiceGamessPlayed_HTML <- html_nodes(match_webpage,".percent-on:nth-child(8) .match-stats-number-right span:nth-child(1)")
P2ServiceGamessPlayed_text <- html_text(P2ServiceGamessPlayed_HTML)
#Return Stats Below
#Return Rating
P1ReturnRating_HTML <- html_nodes(match_webpage,".percent-on~ .percent-on .match-stats-number-left a")
P1ReturnRating_text <- html_text(P1ReturnRating_HTML)
P2ReturnRating_HTML <- html_nodes(match_webpage,".percent-on~ .percent-on .match-stats-number-right a")
P2ReturnRating_text <- html_text(P2ReturnRating_HTML)
#1st Serve Return Points Won
P1FirstServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(12) .match-stats-number-left span:nth-child(1)")
P1FirstServeReturnPointsWon_text <- html_text(P1FirstServeReturnPointsWon_HTML)
P2FirstServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(12) .match-stats-number-right span:nth-child(1)")
P2FirstServeReturnPointsWon_text <- html_text(P2FirstServeReturnPointsWon_HTML)
#2nd Serve Return Points Won
P1SecondServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(13) .match-stats-number-left span:nth-child(1)")
P1SecondServeReturnPointsWon_text <- html_text(P1SecondServeReturnPointsWon_HTML)
P2SecondServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(13) .match-stats-number-right span:nth-child(1)")
P2SecondServeReturnPointsWon_text <- html_text(P2SecondServeReturnPointsWon_HTML)
#Break Points Converted
P1BreakPointsConverted_HTML <- html_nodes(match_webpage,".percent-on:nth-child(14) .match-stats-number-left span:nth-child(1)")
P1BreakPointsConverted_text <- html_text(P1BreakPointsConverted_HTML)
P2BreakPointsConverted_HTML <- html_nodes(match_webpage,".percent-on:nth-child(14) .match-stats-number-right span:nth-child(1)")
P2BreakPointsConverted_text <- html_text(P2BreakPointsConverted_HTML)
#Point Stats Below
#Service Points Won
P1ServicePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(17) .match-stats-number-left span:nth-child(1)")
P1ServicePtsWon_text <- html_text(P1ServicePtsWon_HTML)
P2ServicePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(17) .match-stats-number-right span:nth-child(1)")
P2ServicePtsWon_text <- html_text(P2ServicePtsWon_HTML)
#Return Points Won
P1ReturnPtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(18) .match-stats-number-left span:nth-child(1)")
P1ReturnPtsWon_text <- html_text(P1ReturnPtsWon_HTML)
P2ReturnPtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(18) .match-stats-number-right span:nth-child(1)")
P2ReturnPtsWon_text <- html_text(P2ReturnPtsWon_HTML)
return(t(c(TournamentCode,MatchCode,P1Name, P2Name,P1ServeRating_text,P2ServeRating_text,P1Aces_text,P2Aces_text,P1DoubeFaults_text,P2DoubeFaults_text,P1FirstServe_text,P2FirstServe_text,P1FirstServePtsWon_text,P2FirstServePtsWon_text,P1SecServePtsWon_text,P2SecServePtsWon_text,P1BreakPointsConverted_text,P2BreakPointsConverted_text,P1ServicePtsWon_text,P2ServicePtsWon_text,P1ReturnPtsWon_text,P2ReturnPtsWon_text)))
}
result = lapply(Codes[1:100],getmatchdata)
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(stringi)
library(plyr)
library(caret)
library(gmodels)
library(RCurl)
library(XML)
tournamenturl <- "http://www.atpworldtour.com/en/tournaments"
tournament_webpage <- read_html(tournamenturl)
#First create a dataframe with all the Tournament Names
TournamentName_HTML <- html_nodes(tournament_webpage,".tourney-title")
TournamentName_text <- html_text(TournamentName_HTML)
#Now we need to know the number of players entered in each tournament, the risk with this is that if the number of
#players changes year to year there might be quite a few matches that don't have records, we shall see
TournamentPlayerNum_HTML <- html_nodes(tournament_webpage,"a:nth-child(1) .item-value")
TournamentPlayerNum_text <- html_text(TournamentPlayerNum_HTML)
#we also need the surface of the tournament so we can segment later
TournamentSurface_HTML <- html_nodes(tournament_webpage,".tourney-details:nth-child(2) .item-details")
TournamentSurface_text <- html_text(TournamentSurface_HTML)
TournamentCodes <- data.frame(TournamentName = TournamentName_text)
TournamentCodes$PlayerNum <- TournamentPlayerNum_text
TournamentCodes$Link <- 0
TournamentCodes$Surface <- TournamentSurface_text
#get rid of Davis Cup data
Davis <- c(7,22,56,72)
TournamentCodes$TournamentName[Davis] <- "NA"
TournamentCodes <- na.omit(TournamentCodes)
#now look for the links
nodes <- html_nodes(tournament_webpage,"tbody")
LinksList <- html_nodes(nodes, "a")
#iterate through list, just looking for singles, it goes doubles then singles in the list of links
for (x in 1:nrow(TournamentCodes)){
t3 <- html_attr(LinksList[(x*2-1)][1],"href")
TournamentCodes$Link[x] <- t3
}
#extract code from Link
TournamentCodes$TournamentCode <- 0
library(tidyverse)
rel <- "\\d\\d\\d\\d|\\d\\d\\d"
Code <- str_extract(TournamentCodes$Link,rel)
TournamentCodes$TournamentCode <- Code
TournamentCodes <- subset(TournamentCodes, !is.na(TournamentCodes$TournamentCode))
MatchCodes <- NULL
getcode <- function(x){
return(paste(x,"/MS",sep = ""))
}
result <- mapply(getcode, TournamentCodes$TournamentCode)
MatchCodes = plyr::ldply(result, rbind)
names(MatchCodes) <- c("Tournament","part1")
####### everything aboves here makes the 580/MS
Codes <- NULL
list <- NULL
list <- c(1:127)
list <- stringr::str_pad(list, 3, side = "left", pad = 0)
Result <- c()
Retrieve <- function(x){
for(y in list){
Result <- c(Result, paste(x,y,sep = ""))
}
return(Result)
}
list2 <- MatchCodes$part1
Codes <- Retrieve(list2)
#Get Match Data and stats of players on a match basis
getmatchdata <- function(x) {
year <- 2017
matchpage <- paste0("http://www.atpworldtour.com/en/scores/",year,"/",x,"/match-stats")
s <- html_session(matchpage)
match_webpage <- read_html(matchpage)
TournamentCode <- paste(substring(x,1,nchar(x)-6))
MatchCode <- x
P1FirstName_HTML <- html_nodes(match_webpage,".player-left-name .first-name")
P1FirstName_text <- html_text(P1FirstName_HTML)
P1LastName_HTML <- html_nodes(match_webpage,".player-left-name .last-name")
P1LastName_text <- html_text(P1LastName_HTML)
P1Name <- paste(P1FirstName_text,P1LastName_text)
#Follow individual player links to get more player info.
P1URL_HTML <- html_nodes(match_webpage, ".player-left-name a")
print(P1URL_HTML)
P1Page <- s %>% follow_link(P1URL_HTML) %>% read_html()
P1 <- html_nodes(P1Page,  "#mainLayoutWrapper .table-big-value")
P1age <- P1[1]
P1weight <- P1[3]
P1secondRow <- html_nodes(P1Page, "#mainLayoutWrapper .table-label")
P1stance <- P1secondRow[3]
P2URL_HTML <- html_nodes(match_webpage, ".player-right-name a")
P2URL_text <- html_text(P2URL_HTML)
P2Page <- s %>% follow_link(P2URL_text) %>% read_html()
P2 <- html_nodes(P1Page,  "#mainLayoutWrapper .table-big-value")
P2age <- P2[1]
P2weight <- P2[3]
P2secondRow <- html_nodes(P2Page, "#mainLayoutWrapper .table-label")
P2stance <- P2secondRow[3]
P2FirstName_HTML <- html_nodes(match_webpage,".player-right-name .first-name")
P2FirstName_text <- html_text(P2FirstName_HTML)
#we need to bring this in later so we can deal with score
P2LastName_HTML <- html_nodes(match_webpage,".player-right-name .last-name")
P2LastName_text <- html_text(P2LastName_HTML)
P2Name <- paste(P2FirstName_text,P2LastName_text)
#Data not in the match page, must be retrieves from PlayerData
#Birthday_HTML <- html_nodes(player_webpage,".table-birthday-wrapper")
#Birthday_text <- html_text(Birthday_HTML)
#Weight_HTML <- html_nodes(player_webpage,".table-weight-kg")
#Weight_text <- html_text(Weight_HTML)
#Height_HTML <- html_nodes(player_webpage,".table-height-cm-wrapper")
#Height_text <- html_text(Height_HTML)
#Stance_HTML <- html_nodes(player_webpage,"td:nth-child(3) .table-value")
#Stance_text <- html_text(Stance_HTML)
#Service Stats Below
#Serve Rating
P1ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-left a")
P1ServeRating_text <- html_text(P1ServeRating_HTML)
P2ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-right a")
P2ServeRating_text <- html_text(P2ServeRating_HTML)
#Aces
P1Aces_HTML <- html_nodes(match_webpage,".percent-on:nth-child(3) .match-stats-number-left span")
P1Aces_text <- html_text(P1Aces_HTML)
P2Aces_HTML <- html_nodes(match_webpage,".percent-on:nth-child(3) .match-stats-number-right span")
P2Aces_text <- html_text(P2Aces_HTML)
#DeltaAces <- P1Aces_text - P2Aces_text
#Double Faults
P1DoubeFaults_HTML <- html_nodes(match_webpage,".percent-on:nth-child(4) .match-stats-number-left span")
P1DoubeFaults_text <- html_text(P1DoubeFaults_HTML)
P2DoubeFaults_HTML <- html_nodes(match_webpage,".percent-on:nth-child(4) .match-stats-number-right span")
P2DoubeFaults_text <- html_text(P2DoubeFaults_HTML)
#1st Serve
P1FirstServe_HTML <- html_nodes(match_webpage,".percent-on:nth-child(5) .match-stats-number-left span:nth-child(1)")
P1FirstServe_text <- html_text(P1FirstServe_HTML)
P2FirstServe_HTML <- html_nodes(match_webpage,".percent-on:nth-child(5) .match-stats-number-right span:nth-child(1)")
P2FirstServe_text <- html_text(P2FirstServe_HTML)
#1st Serve Points Won
P1FirstServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(6) .match-stats-number-left span:nth-child(1)")
P1FirstServePtsWon_text <- html_text(P1FirstServePtsWon_HTML)
P2FirstServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(6) .match-stats-number-right span:nth-child(1)")
P2FirstServePtsWon_text <- html_text(P2FirstServePtsWon_HTML)
#2nd Serve Points Won
P1SecServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(7) .match-stats-number-left span:nth-child(1)")
P1SecServePtsWon_text <- html_text(P1SecServePtsWon_HTML)
P2SecServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(7) .match-stats-number-right span:nth-child(1)")
P2SecServePtsWon_text <- html_text(P2SecServePtsWon_HTML)
#Break Points Saved
P1ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-left a")
P1ServeRating_text <- html_text(P1ServeRating_HTML)
P2ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-right a")
P2ServeRating_text <- html_text(P2ServeRating_HTML)
#Service Games Played
P1ServiceGamessPlayed_HTML <- html_nodes(match_webpage,".percent-on:nth-child(8) .match-stats-number-left span:nth-child(1)")
P1ServiceGamessPlayed_text <- html_text(P1ServiceGamessPlayed_HTML)
P2ServiceGamessPlayed_HTML <- html_nodes(match_webpage,".percent-on:nth-child(8) .match-stats-number-right span:nth-child(1)")
P2ServiceGamessPlayed_text <- html_text(P2ServiceGamessPlayed_HTML)
#Return Stats Below
#Return Rating
P1ReturnRating_HTML <- html_nodes(match_webpage,".percent-on~ .percent-on .match-stats-number-left a")
P1ReturnRating_text <- html_text(P1ReturnRating_HTML)
P2ReturnRating_HTML <- html_nodes(match_webpage,".percent-on~ .percent-on .match-stats-number-right a")
P2ReturnRating_text <- html_text(P2ReturnRating_HTML)
#1st Serve Return Points Won
P1FirstServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(12) .match-stats-number-left span:nth-child(1)")
P1FirstServeReturnPointsWon_text <- html_text(P1FirstServeReturnPointsWon_HTML)
P2FirstServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(12) .match-stats-number-right span:nth-child(1)")
P2FirstServeReturnPointsWon_text <- html_text(P2FirstServeReturnPointsWon_HTML)
#2nd Serve Return Points Won
P1SecondServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(13) .match-stats-number-left span:nth-child(1)")
P1SecondServeReturnPointsWon_text <- html_text(P1SecondServeReturnPointsWon_HTML)
P2SecondServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(13) .match-stats-number-right span:nth-child(1)")
P2SecondServeReturnPointsWon_text <- html_text(P2SecondServeReturnPointsWon_HTML)
#Break Points Converted
P1BreakPointsConverted_HTML <- html_nodes(match_webpage,".percent-on:nth-child(14) .match-stats-number-left span:nth-child(1)")
P1BreakPointsConverted_text <- html_text(P1BreakPointsConverted_HTML)
P2BreakPointsConverted_HTML <- html_nodes(match_webpage,".percent-on:nth-child(14) .match-stats-number-right span:nth-child(1)")
P2BreakPointsConverted_text <- html_text(P2BreakPointsConverted_HTML)
#Point Stats Below
#Service Points Won
P1ServicePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(17) .match-stats-number-left span:nth-child(1)")
P1ServicePtsWon_text <- html_text(P1ServicePtsWon_HTML)
P2ServicePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(17) .match-stats-number-right span:nth-child(1)")
P2ServicePtsWon_text <- html_text(P2ServicePtsWon_HTML)
#Return Points Won
P1ReturnPtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(18) .match-stats-number-left span:nth-child(1)")
P1ReturnPtsWon_text <- html_text(P1ReturnPtsWon_HTML)
P2ReturnPtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(18) .match-stats-number-right span:nth-child(1)")
P2ReturnPtsWon_text <- html_text(P2ReturnPtsWon_HTML)
return(t(c(TournamentCode,MatchCode,P1Name, P2Name,P1ServeRating_text,P2ServeRating_text,P1Aces_text,P2Aces_text,P1DoubeFaults_text,P2DoubeFaults_text,P1FirstServe_text,P2FirstServe_text,P1FirstServePtsWon_text,P2FirstServePtsWon_text,P1SecServePtsWon_text,P2SecServePtsWon_text,P1BreakPointsConverted_text,P2BreakPointsConverted_text,P1ServicePtsWon_text,P2ServicePtsWon_text,P1ReturnPtsWon_text,P2ReturnPtsWon_text)))
}
result = lapply(Codes[1:100],getmatchdata)
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(stringi)
library(plyr)
library(caret)
library(gmodels)
library(RCurl)
library(XML)
tournamenturl <- "http://www.atpworldtour.com/en/tournaments"
tournament_webpage <- read_html(tournamenturl)
#First create a dataframe with all the Tournament Names
TournamentName_HTML <- html_nodes(tournament_webpage,".tourney-title")
TournamentName_text <- html_text(TournamentName_HTML)
#Now we need to know the number of players entered in each tournament, the risk with this is that if the number of
#players changes year to year there might be quite a few matches that don't have records, we shall see
TournamentPlayerNum_HTML <- html_nodes(tournament_webpage,"a:nth-child(1) .item-value")
TournamentPlayerNum_text <- html_text(TournamentPlayerNum_HTML)
#we also need the surface of the tournament so we can segment later
TournamentSurface_HTML <- html_nodes(tournament_webpage,".tourney-details:nth-child(2) .item-details")
TournamentSurface_text <- html_text(TournamentSurface_HTML)
TournamentCodes <- data.frame(TournamentName = TournamentName_text)
TournamentCodes$PlayerNum <- TournamentPlayerNum_text
TournamentCodes$Link <- 0
TournamentCodes$Surface <- TournamentSurface_text
#get rid of Davis Cup data
Davis <- c(7,22,56,72)
TournamentCodes$TournamentName[Davis] <- "NA"
TournamentCodes <- na.omit(TournamentCodes)
#now look for the links
nodes <- html_nodes(tournament_webpage,"tbody")
LinksList <- html_nodes(nodes, "a")
#iterate through list, just looking for singles, it goes doubles then singles in the list of links
for (x in 1:nrow(TournamentCodes)){
t3 <- html_attr(LinksList[(x*2-1)][1],"href")
TournamentCodes$Link[x] <- t3
}
#extract code from Link
TournamentCodes$TournamentCode <- 0
library(tidyverse)
rel <- "\\d\\d\\d\\d|\\d\\d\\d"
Code <- str_extract(TournamentCodes$Link,rel)
TournamentCodes$TournamentCode <- Code
TournamentCodes <- subset(TournamentCodes, !is.na(TournamentCodes$TournamentCode))
MatchCodes <- NULL
getcode <- function(x){
return(paste(x,"/MS",sep = ""))
}
result <- mapply(getcode, TournamentCodes$TournamentCode)
MatchCodes = plyr::ldply(result, rbind)
names(MatchCodes) <- c("Tournament","part1")
####### everything aboves here makes the 580/MS
Codes <- NULL
list <- NULL
list <- c(1:127)
list <- stringr::str_pad(list, 3, side = "left", pad = 0)
Result <- c()
Retrieve <- function(x){
for(y in list){
Result <- c(Result, paste(x,y,sep = ""))
}
return(Result)
}
list2 <- MatchCodes$part1
Codes <- Retrieve(list2)
#Get Match Data and stats of players on a match basis
getmatchdata <- function(x) {
year <- 2017
matchpage <- paste0("http://www.atpworldtour.com/en/scores/",year,"/",x,"/match-stats")
s <- html_session(matchpage)
match_webpage <- read_html(matchpage)
TournamentCode <- paste(substring(x,1,nchar(x)-6))
MatchCode <- x
P1FirstName_HTML <- html_nodes(match_webpage,".player-left-name .first-name")
P1FirstName_text <- html_text(P1FirstName_HTML)
P1LastName_HTML <- html_nodes(match_webpage,".player-left-name .last-name")
P1LastName_text <- html_text(P1LastName_HTML)
P1Name <- paste(P1FirstName_text,P1LastName_text)
#Follow individual player links to get more player info.
P1URL_HTML <- html_nodes(match_webpage, ".player-left-name a")
P1URL_HTML <- gsub('<a href=\"', "", P1URL_HTML)
print(P1URL_HTML)
P1Page <- s %>% follow_link(P1URL_HTML) %>% read_html()
P1 <- html_nodes(P1Page,  "#mainLayoutWrapper .table-big-value")
P1age <- P1[1]
P1weight <- P1[3]
P1secondRow <- html_nodes(P1Page, "#mainLayoutWrapper .table-label")
P1stance <- P1secondRow[3]
P2URL_HTML <- html_nodes(match_webpage, ".player-right-name a")
P2URL_text <- html_text(P2URL_HTML)
P2Page <- s %>% follow_link(P2URL_text) %>% read_html()
P2 <- html_nodes(P1Page,  "#mainLayoutWrapper .table-big-value")
P2age <- P2[1]
P2weight <- P2[3]
P2secondRow <- html_nodes(P2Page, "#mainLayoutWrapper .table-label")
P2stance <- P2secondRow[3]
P2FirstName_HTML <- html_nodes(match_webpage,".player-right-name .first-name")
P2FirstName_text <- html_text(P2FirstName_HTML)
#we need to bring this in later so we can deal with score
P2LastName_HTML <- html_nodes(match_webpage,".player-right-name .last-name")
P2LastName_text <- html_text(P2LastName_HTML)
P2Name <- paste(P2FirstName_text,P2LastName_text)
#Data not in the match page, must be retrieves from PlayerData
#Birthday_HTML <- html_nodes(player_webpage,".table-birthday-wrapper")
#Birthday_text <- html_text(Birthday_HTML)
#Weight_HTML <- html_nodes(player_webpage,".table-weight-kg")
#Weight_text <- html_text(Weight_HTML)
#Height_HTML <- html_nodes(player_webpage,".table-height-cm-wrapper")
#Height_text <- html_text(Height_HTML)
#Stance_HTML <- html_nodes(player_webpage,"td:nth-child(3) .table-value")
#Stance_text <- html_text(Stance_HTML)
#Service Stats Below
#Serve Rating
P1ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-left a")
P1ServeRating_text <- html_text(P1ServeRating_HTML)
P2ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-right a")
P2ServeRating_text <- html_text(P2ServeRating_HTML)
#Aces
P1Aces_HTML <- html_nodes(match_webpage,".percent-on:nth-child(3) .match-stats-number-left span")
P1Aces_text <- html_text(P1Aces_HTML)
P2Aces_HTML <- html_nodes(match_webpage,".percent-on:nth-child(3) .match-stats-number-right span")
P2Aces_text <- html_text(P2Aces_HTML)
#DeltaAces <- P1Aces_text - P2Aces_text
#Double Faults
P1DoubeFaults_HTML <- html_nodes(match_webpage,".percent-on:nth-child(4) .match-stats-number-left span")
P1DoubeFaults_text <- html_text(P1DoubeFaults_HTML)
P2DoubeFaults_HTML <- html_nodes(match_webpage,".percent-on:nth-child(4) .match-stats-number-right span")
P2DoubeFaults_text <- html_text(P2DoubeFaults_HTML)
#1st Serve
P1FirstServe_HTML <- html_nodes(match_webpage,".percent-on:nth-child(5) .match-stats-number-left span:nth-child(1)")
P1FirstServe_text <- html_text(P1FirstServe_HTML)
P2FirstServe_HTML <- html_nodes(match_webpage,".percent-on:nth-child(5) .match-stats-number-right span:nth-child(1)")
P2FirstServe_text <- html_text(P2FirstServe_HTML)
#1st Serve Points Won
P1FirstServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(6) .match-stats-number-left span:nth-child(1)")
P1FirstServePtsWon_text <- html_text(P1FirstServePtsWon_HTML)
P2FirstServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(6) .match-stats-number-right span:nth-child(1)")
P2FirstServePtsWon_text <- html_text(P2FirstServePtsWon_HTML)
#2nd Serve Points Won
P1SecServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(7) .match-stats-number-left span:nth-child(1)")
P1SecServePtsWon_text <- html_text(P1SecServePtsWon_HTML)
P2SecServePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(7) .match-stats-number-right span:nth-child(1)")
P2SecServePtsWon_text <- html_text(P2SecServePtsWon_HTML)
#Break Points Saved
P1ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-left a")
P1ServeRating_text <- html_text(P1ServeRating_HTML)
P2ServeRating_HTML <- html_nodes(match_webpage,".percent-on:nth-child(2) .match-stats-number-right a")
P2ServeRating_text <- html_text(P2ServeRating_HTML)
#Service Games Played
P1ServiceGamessPlayed_HTML <- html_nodes(match_webpage,".percent-on:nth-child(8) .match-stats-number-left span:nth-child(1)")
P1ServiceGamessPlayed_text <- html_text(P1ServiceGamessPlayed_HTML)
P2ServiceGamessPlayed_HTML <- html_nodes(match_webpage,".percent-on:nth-child(8) .match-stats-number-right span:nth-child(1)")
P2ServiceGamessPlayed_text <- html_text(P2ServiceGamessPlayed_HTML)
#Return Stats Below
#Return Rating
P1ReturnRating_HTML <- html_nodes(match_webpage,".percent-on~ .percent-on .match-stats-number-left a")
P1ReturnRating_text <- html_text(P1ReturnRating_HTML)
P2ReturnRating_HTML <- html_nodes(match_webpage,".percent-on~ .percent-on .match-stats-number-right a")
P2ReturnRating_text <- html_text(P2ReturnRating_HTML)
#1st Serve Return Points Won
P1FirstServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(12) .match-stats-number-left span:nth-child(1)")
P1FirstServeReturnPointsWon_text <- html_text(P1FirstServeReturnPointsWon_HTML)
P2FirstServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(12) .match-stats-number-right span:nth-child(1)")
P2FirstServeReturnPointsWon_text <- html_text(P2FirstServeReturnPointsWon_HTML)
#2nd Serve Return Points Won
P1SecondServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(13) .match-stats-number-left span:nth-child(1)")
P1SecondServeReturnPointsWon_text <- html_text(P1SecondServeReturnPointsWon_HTML)
P2SecondServeReturnPointsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(13) .match-stats-number-right span:nth-child(1)")
P2SecondServeReturnPointsWon_text <- html_text(P2SecondServeReturnPointsWon_HTML)
#Break Points Converted
P1BreakPointsConverted_HTML <- html_nodes(match_webpage,".percent-on:nth-child(14) .match-stats-number-left span:nth-child(1)")
P1BreakPointsConverted_text <- html_text(P1BreakPointsConverted_HTML)
P2BreakPointsConverted_HTML <- html_nodes(match_webpage,".percent-on:nth-child(14) .match-stats-number-right span:nth-child(1)")
P2BreakPointsConverted_text <- html_text(P2BreakPointsConverted_HTML)
#Point Stats Below
#Service Points Won
P1ServicePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(17) .match-stats-number-left span:nth-child(1)")
P1ServicePtsWon_text <- html_text(P1ServicePtsWon_HTML)
P2ServicePtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(17) .match-stats-number-right span:nth-child(1)")
P2ServicePtsWon_text <- html_text(P2ServicePtsWon_HTML)
#Return Points Won
P1ReturnPtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(18) .match-stats-number-left span:nth-child(1)")
P1ReturnPtsWon_text <- html_text(P1ReturnPtsWon_HTML)
P2ReturnPtsWon_HTML <- html_nodes(match_webpage,".percent-on:nth-child(18) .match-stats-number-right span:nth-child(1)")
P2ReturnPtsWon_text <- html_text(P2ReturnPtsWon_HTML)
return(t(c(TournamentCode,MatchCode,P1Name, P2Name,P1ServeRating_text,P2ServeRating_text,P1Aces_text,P2Aces_text,P1DoubeFaults_text,P2DoubeFaults_text,P1FirstServe_text,P2FirstServe_text,P1FirstServePtsWon_text,P2FirstServePtsWon_text,P1SecServePtsWon_text,P2SecServePtsWon_text,P1BreakPointsConverted_text,P2BreakPointsConverted_text,P1ServicePtsWon_text,P2ServicePtsWon_text,P1ReturnPtsWon_text,P2ReturnPtsWon_text)))
}
result = lapply(Codes[1:100],getmatchdata)
